@model ApplicantsTask.Presentation.MVC.DTOs.InputDTOs.ApplicantInputDTO

@{
    Layout = "~/Views/Shared/_Layout.cshtml";

}
<section class="content">
    <div class="row">
        <!-- left column -->
        <div class="col-md-12">
            <!-- general form elements -->
            <div class="box box-primary">
                <div class="box-header with-border">
                    <h3 class="box-title">Add New Applicant</h3>
                </div>
                <!-- /.box-header -->
                <!-- form start -->
                @using (Html.BeginForm("CreateOrUpdate", "ApplicantClient", FormMethod.Post))
                {

                    <div class="clearfix"></div>
                    <div class="box-body">
                        @Html.AntiForgeryToken()

                        @Html.HiddenFor(p => p.Id)
                        @Html.HiddenFor(p => p.CreatedBy)
                        @Html.HiddenFor(p => p.CreationDate)


                        <div class="form-group">
                            @Html.LabelFor(model => model.Name, new { @class = "control-label col-md-2 required" })
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.Name, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Name, null, new { @class = "text-danger" })
                            </div>
                        </div>
                        <br />
                        <br />
                        <div class="form-group">
                            @Html.LabelFor(model => model.FamilyName, new { @class = "control-label col-md-2 required" })
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.FamilyName, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.FamilyName, null, new { @class = "text-danger" })
                            </div>
                        </div>
                        <br />
                        <br />
                        <div class="clearfix"></div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Address, new { @class = "control-label col-md-2 required" })
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.Address, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Address, null, new { @class = "text-danger" })
                            </div>
                        </div>
                        <br />
                        <br />
                                  <div class="clearfix"></div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.CountryOfOrigion, new { @class = "control-label col-md-2 required" })
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.CountryOfOrigion, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.CountryOfOrigion, null, new { @class = "text-danger" })
                            </div>
                        </div>
                        <br />
                        <br />
                                  <div class="clearfix"></div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.EmailAddress, new { @class = "control-label col-md-2 required" })
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.EmailAddress, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.EmailAddress, null, new { @class = "text-danger" })
                            </div>
                        </div>
                        <br />
                        <br />
                                  <div class="clearfix"></div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Age, new { @class = "control-label col-md-2 required" })
                            <div class="col-md-5">
                                @Html.TextBoxFor(model => model.Age, new { onkeypress = "return isNumberKey(event)", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Age, null, new { @class = "text-danger" })
                            </div>
                        </div>
                        <br />
                        <br />
                                  <div class="clearfix"></div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Hired, new { @class = "control-label col-md-2 required" })
                            <div class="col-md-5">
                                @Html.CheckBoxFor(model => model.Hired)
                                @Html.ValidationMessageFor(model => model.Hired, null, new { @class = "text-danger" })
                            </div>
                        </div>
                                  <div class="clearfix"></div>



                    </div>
                    <!-- /.box-body -->

                    <div class="box-footer">
                        <div class="col-md-4"></div>
                        <div class="col-md-4">
                            <button type="submit" class="btn btn-primary">Save</button>

                            <a class="btn btn-primary" id="Edite_status" href="@Url.Action("Index","ApplicantClient")">
                                Close
                            </a>
                        </div>
                        <div class="col-md-4"></div>
                    </div>
                }
            </div>
            <!-- /.box -->
        </div>
    </div>
</section>

<script>
    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
            && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

</script>